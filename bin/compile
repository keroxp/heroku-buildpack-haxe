#!/usr/bin/env bash

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

arrow() {
  c='s/^/-----> /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if [ -f $BUILD_DIR/.haxerc ]; then
  echo ".haxerc found. read version info of Haxe and Neko." | arrow
  source $BUILD_DIR/.haxerc
fi

if [ -z $HAXE_VERSION ]; then
  echo "HAXE_VERSION was unspecified. " | indent
  echo "try to download haxe-3.2.0" | indent
  HAXE_VERSION=3.2.0
else
  echo "HAXE_VERSION is $HAXE_VERSION" | indent
fi

if [ -z $NEKO_VERSION ]; then
  echo "NEKO_VERSION was unspecified. " | indent
  echo "try to download neko-2.0.0" | indent
  NEKO_VERSION=2.0.0
else
  echo "NEKO_VERSION is $NEKO_VERSION" | indent
fi

VENDOR_DIR=$BUILD_DIR/vendor
mkdir -p $VENDOR_DIR

# if [ -d $CACHE_DIR/haxe ]; then

#   echo "Restoring Haxe Build Tools from cache" | arrow
#   ls $CACHE_DIR/haxe
#   cp -r $CACHE_DIR/haxe/* $VENDOR_DIR

# else

  mkdir -p $VENDOR_DIR/bin
  mkdir -p $VENDOR_DIR/lib

  if [ `uname -m` = "x86_64" ]; then

    echo "Downloading Neko $NEKO_VERSION (64-bit)" | arrow

    wget -c http://nekovm.org/_media/neko-$NEKO_VERSION-linux64.tar.gz

    echo "Installing Neko $NEKO_VERSION" | arrow

    # Extract and copy files to $BUILD_DIR/lib/neko

    tar xvzf neko-$NEKO_VERSION-linux64.tar.gz
    mkdir -p $VENDOR_DIR/lib/neko
    cp -r neko-$NEKO_VERSION-linux/* $VENDOR_DIR/lib/neko

    # Add symlinks

    ln -s $VENDOR_DIR/lib/neko/libneko.so $VENDOR_DIR/lib/libneko.so
    ln -s $VENDOR_DIR/lib/neko/neko $VENDOR_DIR/bin/neko
    ln -s $VENDOR_DIR/lib/neko/nekoc $VENDOR_DIR/bin/nekoc
    ln -s $VENDOR_DIR/lib/neko/nekotools $VENDOR_DIR/bin/nekotools

    if [ -d "/usr/lib64" ]; then

      set +e
       rm -rf /usr/lib64/libneko.so
       ln -s /usr/lib/neko/libneko.so $VENDOR_DIR/lib64/libneko.so
      set -e

    fi

    # Cleanup

    rm -rf neko-$NEKO_VERSION-linux
    rm neko-$NEKO_VERSION-linux64.tar.gz


  else

    echo "Downloading Neko $NEKO_VERSION (32-bit)" | arrow

    wget -c http://nekovm.org/_media/neko-$NEKO_VERSION-linux.tar.gz

    echo "Installing Neko $NEKO_VERSION" | arrow


    # Extract and copy files to $VENDOR_DIR/lib/neko

    tar xvzf neko-$NEKO_VERSION-linux.tar.gz
    mkdir -p $VENDOR_DIR/lib/neko
    cp -r neko-$NEKO_VERSION-linux/* $VENDOR_DIR/lib/neko

    # Add symlinks

    ln -s $VENDOR_DIR/lib/neko/neko $VENDOR_DIR/bin/neko
    ln -s $VENDOR_DIR/lib/neko/nekoc $VENDOR_DIR/bin/nekoc
    ln -s $VENDOR_DIR/lib/neko/nekotools $VENDOR_DIR/bin/nekotools
    ln -s $VENDOR_DIR/lib/neko/libneko.so $VENDOR_DIR/lib/libneko.so


    # Cleanup

    rm -rf neko-$NEKO_VERSION-linux
    rm neko-$NEKO_VERSION-linux.tar.gz


  fi


  # Install libgc, which is required for Neko

  echo "Installing libgc" | arrow

  git clone git://github.com/ivmai/bdwgc.git
  cd bdwgc
  git clone git://github.com/ivmai/libatomic_ops.git
  autoreconf -vif
  automake --add-missing
  ./configure --prefix=$VENDOR_DIR
  make
  make install


  if [ -d "/usr/lib64" ] && [ ! -f "/usr/lib64/libpcre.so.3" ]; then

    set +e
     ln -s /usr/lib64/libpcre.so.1 /usr/lib64/libpcre.so.3
    set -e

  fi


  if [ `uname -m` = "x86_64" ]; then

    echo "Downloading Haxe $HAXE_VERSION (64-bit)" | arrow

    wget -c http://haxe.org/website-content/downloads/$HAXE_VERSION/downloads/haxe-$HAXE_VERSION-linux64.tar.gz

    echo "Installing Haxe $HAXE_VERSION" | arrow

    # Extract and copy files to $VENDOR_DIR/lib/haxe

    mkdir -p $VENDOR_DIR/lib/haxe
    tar xvzf haxe-$HAXE_VERSION-linux64.tar.gz -C $VENDOR_DIR/lib/haxe --strip-components=1


    # Add symlinks

    ln -s $VENDOR_DIR/lib/haxe/haxe $VENDOR_DIR/bin/haxe
    ln -s $VENDOR_DIR/lib/haxe/haxelib $VENDOR_DIR/bin/haxelib


    # Set up haxelib

    mkdir -p $VENDOR_DIR/lib/haxe/lib
    chmod -R 777 $VENDOR_DIR/lib/haxe/lib


    # Cleanup

    rm haxe-$HAXE_VERSION-linux64.tar.gz


  else

    echo "Downloading Haxe $HAXE_VERSION (32-bit)" | arrow

    wget -c http://haxe.org/website-content/downloads/$HAXE_VERSION/downloads/haxe-$HAXE_VERSION-linux32.tar.gz

    echo "Installing Haxe $HAXE_VERSION" | arrow

    # Extract and copy files to $VENDOR_DIR/lib/haxe

     mkdir -p $VENDOR_DIR/lib/haxe
     tar xvzf haxe-$HAXE_VERSION-linux32.tar.gz -C $VENDOR_DIR/lib/haxe --strip-components=1


    # Add symlinks

     ln -s $VENDOR_DIR/lib/haxe/haxe $VENDOR_DIR/bin/haxe
     ln -s $VENDOR_DIR/lib/haxe/haxelib $VENDOR_DIR/bin/haxelib


    # Set up haxelib

     mkdir -p $VENDOR_DIR/lib/haxe/lib
     chmod -R 777 $VENDOR_DIR/lib/haxe/lib
     $VENDOR_DIR/bin/haxelib setup $VENDOR_DIR/lib/haxe/lib


    # Cleanup

    rm haxe-$HAXE_VERSION-linux32.tar.gz

  fi

  # echo "Caching Haxe Build Tools for future builds" | arrow
  # mkdir -p $CACHE_DIR/haxe
  # cp -r $VENDOR_DIR/* $CACHE_DIR/haxe
  # if [ -d $VENDOR_DIR ]; then
  #   cp -r $VENDOR_DIR/* $CACHE_DIR/haxe
  # fi

# fi

echo "Building Haxe Project from build.hxml" | arrow

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$VENDOR_DIR/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$VENDOR_DIR/lib/neko
export HAXEPATH=$VENDOR_DIR/lib/haxe
export HAXE_STD_PATH=$HAXEPATH/std:.
export NEKOPATH=$VENDOR_DIR/lib/neko
export PATH=$PATH:$VENDOR_DIR/bin:$HAXE_STD_PATH
$HAXEPATH/haxelib setup $VENDOR_DIR/lib/haxe/lib
yes | $HAXEPATH/haxelib install $BUILD_DIR/build.hxml
$HAXEPATH/haxe $BUILD_DIR/build.hxml -v

echo "Done" | arrow